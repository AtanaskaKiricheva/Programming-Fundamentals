using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text.RegularExpressions;

public class Program
{
    public static void Main()
    {
        int n = int.Parse(Console.ReadLine());

        Dictionary<string, Dictionary<string, long>> legions = new Dictionary<string, Dictionary<string, long>>();
        Dictionary<string, long> activities = new Dictionary<string, long>();

        for (int i = 0; i < n; i++)
        {
            string[] input = Console.ReadLine().Split(new char[] { ' ', '=', '-', '>', ':' }, StringSplitOptions.RemoveEmptyEntries);
            long lastActivity = long.Parse(input[0]);
            string legionName = input[1];
            string soldierType = input[2];
            long soldierCount = long.Parse(input[3]);

            if (!legions.ContainsKey(legionName))
            {
                legions.Add(legionName, new Dictionary<string, long>());
                legions[legionName].Add(soldierType, soldierCount);
                activities.Add(legionName, lastActivity);
            }
            else
            {
                if (!legions[legionName].ContainsKey(soldierType))
                {
                    legions[legionName].Add(soldierType, soldierCount);
                }

                legions[legionName][soldierType] += soldierCount;

                if (activities[legionName] < lastActivity)
                {
                    activities[legionName] = lastActivity;
                }
            }
        }
        string[] command = Console.ReadLine().Split('\\');

        if (command.Length > 1)
        {
            long lastActivity = long.Parse(command[0]);
            string soldierType = command[1];
            foreach (var outer in legions.OrderByDescending(x => x.Value.Values.Sum()))
            {
                foreach (var inner in outer.Value)
                {
                    if (activities[outer.Key] < lastActivity && soldierType == inner.Key)
                    {
                        Console.WriteLine(outer.Key + " -> " + inner.Value);
                    }
                }
            }
        }
        else
        {
            string soldierType = command[0];

            foreach (var kvp in activities.OrderByDescending(x => x.Value))
            {
                if (legions[kvp.Key].Keys.Contains(soldierType))
                {
                    Console.WriteLine(kvp.Value + " : " + kvp.Key);
                }

            }
        }

    }
}
